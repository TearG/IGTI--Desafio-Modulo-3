{"ast":null,"code":"var _jsxFileName = \"/media/leandro/e8f3fcf8-e661-4226-9297-b6bbbd43f71a/03/IGTI-fullstack-bootcamp-master/unit03/react-salario/src/components/inputs/InputReadOnly.js\";\nimport React, { Component } from 'react';\nimport { formatCurrency, formatPercentage } from '../utils/formatters';\nexport default class InputReadOnly extends Component {\n  render() {\n    const {\n      label,\n      value,\n      percentage,\n      color\n    } = this.props;\n    const id = label.replace(/\\s/g, \"\");\n    let value_formatted = '';\n\n    if (!isNaN(percentage)) {\n      value_formatted = `${formatCurrency(value)} (${formatPercentage(percentage)})`;\n    } else {\n      value_formatted = `${formatCurrency(value)}`;\n    }\n\n    let text_color = 'black-text';\n\n    if (color !== undefined) {\n      let color_cfg = color.split(\" \");\n      text_color = `${color_cfg[0]}-text`;\n\n      if (color_cfg.length > 1) {\n        text_color += ` text-${color_cfg[1]}`;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      disabled: true,\n      className: text_color,\n      style: {\n        fontWeight: \"bold\"\n      },\n      id: id,\n      type: \"text\",\n      value: value_formatted,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"active\",\n      htmlFor: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, label));\n  }\n\n}","map":{"version":3,"sources":["/media/leandro/e8f3fcf8-e661-4226-9297-b6bbbd43f71a/03/IGTI-fullstack-bootcamp-master/unit03/react-salario/src/components/inputs/InputReadOnly.js"],"names":["React","Component","formatCurrency","formatPercentage","InputReadOnly","render","label","value","percentage","color","props","id","replace","value_formatted","isNaN","text_color","undefined","color_cfg","split","length","fontWeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,qBAAjD;AAEA,eAAe,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AACnDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,UAAhB;AAA4BC,MAAAA;AAA5B,QAAsC,KAAKC,KAAjD;AACA,UAAMC,EAAE,GAAGL,KAAK,CAACM,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAX;AAEA,QAAIC,eAAe,GAAG,EAAtB;;AACA,QAAI,CAACC,KAAK,CAACN,UAAD,CAAV,EAAwB;AACtBK,MAAAA,eAAe,GAAI,GAAEX,cAAc,CAACK,KAAD,CAAQ,KAAIJ,gBAAgB,CAACK,UAAD,CAAa,GAA5E;AACD,KAFD,MAEO;AACLK,MAAAA,eAAe,GAAI,GAAEX,cAAc,CAACK,KAAD,CAAQ,EAA3C;AACD;;AAED,QAAIQ,UAAU,GAAG,YAAjB;;AACA,QAAIN,KAAK,KAAKO,SAAd,EAAyB;AACvB,UAAIC,SAAS,GAAGR,KAAK,CAACS,KAAN,CAAY,GAAZ,CAAhB;AACAH,MAAAA,UAAU,GAAI,GAAEE,SAAS,CAAC,CAAD,CAAI,OAA7B;;AACA,UAAIA,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACxBJ,QAAAA,UAAU,IAAK,SAAQE,SAAS,CAAC,CAAD,CAAI,EAApC;AACD;AACF;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,SAAS,EAAEF,UAFb;AAGE,MAAA,KAAK,EAAE;AAAEK,QAAAA,UAAU,EAAE;AAAd,OAHT;AAIE,MAAA,EAAE,EAAET,EAJN;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,KAAK,EAAEE,eANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eASE;AACE,MAAA,SAAS,EAAC,QADZ;AAEE,MAAA,OAAO,EAAEF,EAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGL,KAJH,CATF,CADF;AAkBD;;AAvCkD","sourcesContent":["import React, { Component } from 'react'\nimport { formatCurrency, formatPercentage } from '../utils/formatters';\n\nexport default class InputReadOnly extends Component {\n  render() {\n    const { label, value, percentage, color } = this.props;\n    const id = label.replace(/\\s/g, \"\");\n\n    let value_formatted = '';\n    if (!isNaN(percentage)) {\n      value_formatted = `${formatCurrency(value)} (${formatPercentage(percentage)})`;\n    } else {\n      value_formatted = `${formatCurrency(value)}`;\n    }\n\n    let text_color = 'black-text';\n    if (color !== undefined) {\n      let color_cfg = color.split(\" \");\n      text_color = `${color_cfg[0]}-text`;\n      if (color_cfg.length > 1) {\n        text_color += ` text-${color_cfg[1]}`\n      }\n    }\n\n    return (\n      <div className=\"input-field col s3\">\n        <input\n          disabled\n          className={text_color}\n          style={{ fontWeight: \"bold\" }}\n          id={id}\n          type=\"text\"\n          value={value_formatted}\n        />\n        <label\n          className=\"active\"\n          htmlFor={id}\n        >\n          {label}\n        </label>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const inss = [{\n  \"min_wage\": 0,\n  \"max_wage\": 1045.00,\n  \"difference\": 1045.00 - 0,\n  \"aliquot\": 0.075\n}, {\n  \"min_wage\": 1045.01,\n  \"max_wage\": 2089.60,\n  \"difference\": 2089.60 - 1045.00,\n  \"aliquot\": 0.090\n}, {\n  \"min_wage\": 2089.61,\n  \"max_wage\": 3134.40,\n  \"difference\": 3134.40 - 2089.60,\n  \"aliquot\": 0.120\n}, {\n  \"min_wage\": 3134.41,\n  \"max_wage\": 6101.06,\n  \"difference\": 6101.06 - 3134.40,\n  \"aliquot\": 0.140\n}];\nconst inss_max_discount = 713.10;\nconst irpf = [{\n  \"min_wage\": 1903.98,\n  \"aliquot\": 0.075,\n  \"deductible\": 142.80\n}, {\n  \"min_wage\": 2826.65,\n  \"aliquot\": 0.150,\n  \"deductible\": 354.80\n}, {\n  \"min_wage\": 3751.05,\n  \"aliquot\": 0.225,\n  \"deductible\": 636.13\n}, {\n  \"min_wage\": 4664.68,\n  \"aliquot\": 0.275,\n  \"deductible\": 869.36\n}];\n\nfunction getInssDiscount(salary) {\n  let discount = 0;\n\n  if (salary > inss[3].max_wage) {\n    discount = inss_max_discount;\n  } else {\n    for (let i = 0; i < inss.length; i++) {\n      let curRange = inss[i];\n\n      if (salary > curRange.max_wage) {\n        discount += curRange.difference * curRange.aliquot;\n      } else {\n        discount += (salary - curRange.min_wage) * curRange.aliquot;\n        break;\n      }\n    }\n  }\n\n  return discount.toFixed(2);\n}\n\nfunction getIrpfDiscount(salary) {\n  let discount = 0;\n  irpf.forEach(range => {\n    if (salary > range.min_wage) {\n      discount = salary * range.aliquot - range.deductible;\n    }\n  });\n  return discount.toFixed(2);\n}\n\nexport function getSalary(gross) {\n  const inss_discount = getInssDiscount(gross);\n  const inss_percentage = gross === 0 ? 0 : inss_discount / gross;\n  const irpf_base = gross - inss_discount;\n  const irpf_discount = getIrpfDiscount(irpf_base);\n  const irpf_percentage = gross === 0 ? 0 : irpf_discount / gross;\n  const net_value = gross - inss_discount - irpf_discount;\n  const net_percentage = net_value / gross;\n  return {\n    inss_base: gross,\n    inss_discount,\n    inss_percentage,\n    irpf_base,\n    irpf_discount,\n    irpf_percentage,\n    net_value,\n    net_percentage\n  };\n}","map":{"version":3,"sources":["/media/leandro/e8f3fcf8-e661-4226-9297-b6bbbd43f71a/03/IGTI-fullstack-bootcamp-master/unit03/react-salario/src/components/utils/salary.js"],"names":["inss","inss_max_discount","irpf","getInssDiscount","salary","discount","max_wage","i","length","curRange","difference","aliquot","min_wage","toFixed","getIrpfDiscount","forEach","range","deductible","getSalary","gross","inss_discount","inss_percentage","irpf_base","irpf_discount","irpf_percentage","net_value","net_percentage","inss_base"],"mappings":"AAAA,MAAMA,IAAI,GAAG,CACX;AACE,cAAY,CADd;AAEE,cAAY,OAFd;AAGE,gBAAc,UAAU,CAH1B;AAIE,aAAW;AAJb,CADW,EAOX;AACE,cAAY,OADd;AAEE,cAAY,OAFd;AAGE,gBAAc,UAAU,OAH1B;AAIE,aAAW;AAJb,CAPW,EAaX;AACE,cAAY,OADd;AAEE,cAAY,OAFd;AAGE,gBAAc,UAAU,OAH1B;AAIE,aAAW;AAJb,CAbW,EAmBX;AACE,cAAY,OADd;AAEE,cAAY,OAFd;AAGE,gBAAc,UAAU,OAH1B;AAIE,aAAW;AAJb,CAnBW,CAAb;AA2BA,MAAMC,iBAAiB,GAAG,MAA1B;AAEA,MAAMC,IAAI,GAAG,CACX;AACE,cAAY,OADd;AAEE,aAAW,KAFb;AAGE,gBAAc;AAHhB,CADW,EAMX;AACE,cAAY,OADd;AAEE,aAAW,KAFb;AAGE,gBAAc;AAHhB,CANW,EAWX;AACE,cAAY,OADd;AAEE,aAAW,KAFb;AAGE,gBAAc;AAHhB,CAXW,EAgBX;AACE,cAAY,OADd;AAEE,aAAW,KAFb;AAGE,gBAAc;AAHhB,CAhBW,CAAb;;AAuBA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC/B,MAAIC,QAAQ,GAAG,CAAf;;AAEA,MAAID,MAAM,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQM,QAArB,EAA+B;AAC7BD,IAAAA,QAAQ,GAAGJ,iBAAX;AACD,GAFD,MAEO;AACL,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIE,QAAQ,GAAGT,IAAI,CAACO,CAAD,CAAnB;;AACA,UAAIH,MAAM,GAAGK,QAAQ,CAACH,QAAtB,EAAgC;AAC9BD,QAAAA,QAAQ,IAAII,QAAQ,CAACC,UAAT,GAAsBD,QAAQ,CAACE,OAA3C;AACD,OAFD,MAEO;AACLN,QAAAA,QAAQ,IAAI,CAACD,MAAM,GAAGK,QAAQ,CAACG,QAAnB,IAA+BH,QAAQ,CAACE,OAApD;AACA;AACD;AACF;AACF;;AAED,SAAON,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,CAAP;AACD;;AAED,SAASC,eAAT,CAAyBV,MAAzB,EAAiC;AAC/B,MAAIC,QAAQ,GAAG,CAAf;AAEAH,EAAAA,IAAI,CAACa,OAAL,CAAaC,KAAK,IAAI;AACpB,QAAIZ,MAAM,GAAGY,KAAK,CAACJ,QAAnB,EAA6B;AAC3BP,MAAAA,QAAQ,GAAID,MAAM,GAAGY,KAAK,CAACL,OAAhB,GAA2BK,KAAK,CAACC,UAA5C;AACD;AACF,GAJD;AAMA,SAAOZ,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,CAAP;AACD;;AAED,OAAO,SAASK,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAMC,aAAa,GAAGjB,eAAe,CAACgB,KAAD,CAArC;AACA,QAAME,eAAe,GAAGF,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkBC,aAAa,GAAGD,KAA1D;AACA,QAAMG,SAAS,GAAGH,KAAK,GAAGC,aAA1B;AACA,QAAMG,aAAa,GAAGT,eAAe,CAACQ,SAAD,CAArC;AACA,QAAME,eAAe,GAAGL,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkBI,aAAa,GAAGJ,KAA1D;AACA,QAAMM,SAAS,GAAGN,KAAK,GAAGC,aAAR,GAAwBG,aAA1C;AACA,QAAMG,cAAc,GAAGD,SAAS,GAAGN,KAAnC;AAEA,SAAQ;AACNQ,IAAAA,SAAS,EAAER,KADL;AAENC,IAAAA,aAFM;AAGNC,IAAAA,eAHM;AAINC,IAAAA,SAJM;AAKNC,IAAAA,aALM;AAMNC,IAAAA,eANM;AAONC,IAAAA,SAPM;AAQNC,IAAAA;AARM,GAAR;AAUD","sourcesContent":["const inss = [\n  {\n    \"min_wage\": 0,\n    \"max_wage\": 1045.00,\n    \"difference\": 1045.00 - 0,\n    \"aliquot\": 0.075\n  },\n  {\n    \"min_wage\": 1045.01,\n    \"max_wage\": 2089.60,\n    \"difference\": 2089.60 - 1045.00,\n    \"aliquot\": 0.090\n  },\n  {\n    \"min_wage\": 2089.61,\n    \"max_wage\": 3134.40,\n    \"difference\": 3134.40 - 2089.60,\n    \"aliquot\": 0.120\n  },\n  {\n    \"min_wage\": 3134.41,\n    \"max_wage\": 6101.06,\n    \"difference\": 6101.06 - 3134.40,\n    \"aliquot\": 0.140\n  },\n];\n\nconst inss_max_discount = 713.10;\n\nconst irpf = [\n  {\n    \"min_wage\": 1903.98,\n    \"aliquot\": 0.075,\n    \"deductible\": 142.80\n  },\n  {\n    \"min_wage\": 2826.65,\n    \"aliquot\": 0.150,\n    \"deductible\": 354.80\n  },\n  {\n    \"min_wage\": 3751.05,\n    \"aliquot\": 0.225,\n    \"deductible\": 636.13\n  },\n  {\n    \"min_wage\": 4664.68,\n    \"aliquot\": 0.275,\n    \"deductible\": 869.36\n  }\n];\n\nfunction getInssDiscount(salary) {\n  let discount = 0;\n\n  if (salary > inss[3].max_wage) {\n    discount = inss_max_discount;\n  } else {\n    for (let i = 0; i < inss.length; i++) {\n      let curRange = inss[i];\n      if (salary > curRange.max_wage) {\n        discount += curRange.difference * curRange.aliquot;\n      } else {\n        discount += (salary - curRange.min_wage) * curRange.aliquot;\n        break;\n      }\n    }\n  }\n\n  return discount.toFixed(2);\n}\n\nfunction getIrpfDiscount(salary) {\n  let discount = 0;\n\n  irpf.forEach(range => {\n    if (salary > range.min_wage) {\n      discount = (salary * range.aliquot) - range.deductible;\n    }\n  });\n\n  return discount.toFixed(2);\n}\n\nexport function getSalary(gross) {\n  const inss_discount = getInssDiscount(gross);\n  const inss_percentage = gross === 0 ? 0 : inss_discount / gross;\n  const irpf_base = gross - inss_discount;\n  const irpf_discount = getIrpfDiscount(irpf_base);\n  const irpf_percentage = gross === 0 ? 0 : irpf_discount / gross;\n  const net_value = gross - inss_discount - irpf_discount;\n  const net_percentage = net_value / gross;\n\n  return ({\n    inss_base: gross,\n    inss_discount,\n    inss_percentage,\n    irpf_base,\n    irpf_discount,\n    irpf_percentage,\n    net_value,\n    net_percentage\n  });\n}"]},"metadata":{},"sourceType":"module"}